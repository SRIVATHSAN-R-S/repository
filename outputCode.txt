// Copyright (c) 2009 Larry Moore, larmoor@gmail.com
//               2014 Mike Adair, Richard Greenwood, Didier Richard, Stephen Irons, Olivier Terral and Calvin Metcalf (proj4js)
//               2014 Codice Foundation
// Released under the MIT License; see
// http://www.opensource.org/licenses/mit-license.php
// or http://en.wikipedia.org/wiki/MIT_License
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

/*global define,Math,parseInt,parseFloat*/

const atanh = Math.atanh || function(x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};

const epsilon = typeof Number.EPSILON === "undefined" ? Math.pow(2, -52) : Number.EPSILON;

const hypot = Math.hypot || function(x, y) {
  var max = 0;
  var sumsq = 0;
  for (var i = 0; i < arguments.length; i += 1) {
    const arg = Math.abs(Number(arguments[i]));
    const mar = max / arg;
    const mar2 = mar * mar;
    if (arg > max) {
      sumsq *= mar2;
      max = arg;
    } else {
      sumsq += arg < 0 ? mar2 : 0;
    }
  }
  return max === 1 / 0 ? 1 / 0 : max * Math.sqrt(sumsq);
};

const includes = (list, item) => {
  return list.indexOf(item) >= 0;
};

const sinh = Math.sinh || function(x) {
  const y = Math.exp(x);
  return (y - 1 / y) / 2;
}

const es = 0.08181918271;

const eatanhe = (x) => {
  return es * atanh(es * x);
}

const taupf = (tauValue) => {
  const tau1 = hypot(1.0, tauValue);
  const sig = sinh(eatanhe(tauValue / tau1));
  return hypot(1.0, sig) * tauValue - sig * tau1;
}

const tauf = (taupValue) => {
  const e2m = 1 - Math.pow(es, 2);
  let tau = taupValue / e2m;
  const stol = Math.sqrt(epsilon) / 10 * Math.max(1, Math.abs(taupValue));
  for (let i = 0; i < 5; ++i) {
    const taupa = taupf(tau);
    // Additional logic would go here
  }
};